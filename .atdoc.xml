<?xml version="1.0" encoding="UTF-8"?>
<documentation include-internal-symbols-p="yes" index-title="No Title" css="index.css" heading="No Heading"><package name="little-zmq" id="little-zmq"><documentation-string>no documentation string found</documentation-string><external-symbols><macro-definition id="little-zmq__fun__with-socket" name="with-socket" package="little-zmq"><lambda-list><elt>(socket context type &amp;rest parameters)</elt><elt>&amp;body</elt><elt>body</elt></lambda-list></macro-definition><function-definition id="little-zmq__fun__close-message" name="close-message" package="little-zmq"><lambda-list><elt>message</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__as-string-message" name="as-string-message" package="little-zmq"><lambda-list><elt>msg</elt></lambda-list></function-definition><class-definition id="little-zmq__class__message" name="message" package="little-zmq"><cpl><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses><subclass status="EXTERNAL" id="little-zmq__class__octet-message" name="octet-message" package="little-zmq"/><subclass status="EXTERNAL" id="little-zmq__class__string-message" name="string-message" package="little-zmq"/></subclasses></class-definition><macro-definition id="little-zmq__fun__with-eintr-retry" name="with-eintr-retry" package="little-zmq"><lambda-list><elt>&amp;optional</elt><elt>(active t)</elt><elt>&amp;body</elt><elt>body</elt></lambda-list></macro-definition><class-definition id="zmq-bindings__class__pull" name="pull" package="zmq-bindings"><cpl><superclass status="INTERNAL" name="socket" package="zmq-bindings"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string></documentation-string></class-definition><macro-definition id="little-zmq__fun__with-context" name="with-context" package="little-zmq"><lambda-list><elt>(ctx &amp;optional (io-threads 1))</elt><elt>&amp;body</elt><elt>body</elt></lambda-list></macro-definition><function-definition id="little-zmq__fun__has-events-p" name="has-events-p" package="little-zmq"><lambda-list><elt>poll-item-ptr</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__data" name="data" package="little-zmq"><lambda-list><elt>object</elt></lambda-list></function-definition><class-definition id="zmq-bindings__class__req" name="req" package="zmq-bindings"><cpl><superclass status="INTERNAL" name="socket" package="zmq-bindings"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string></documentation-string></class-definition><function-definition id="little-zmq__fun__make-message-future" name="make-message-future" package="little-zmq"><lambda-list><elt>socket</elt><elt>&amp;key</elt><elt>(blocking t)</elt><elt>(eintr-retry t)</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__size" name="size" package="little-zmq"><lambda-list><elt>msg</elt></lambda-list></function-definition><class-definition id="little-zmq__class__string-message" name="string-message" package="little-zmq"><cpl><superclass status="EXTERNAL" id="little-zmq__class__message" name="message" package="little-zmq"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/></class-definition><class-definition id="zmq-bindings__class__router" name="router" package="zmq-bindings"><cpl><superclass status="INTERNAL" name="socket" package="zmq-bindings"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string></documentation-string></class-definition><macro-definition id="little-zmq__fun__with-poll-list" name="with-poll-list" package="little-zmq"><lambda-list><elt>(symbol &amp;rest poll-items)</elt><elt>&amp;body</elt><elt>body</elt></lambda-list></macro-definition><function-definition id="little-zmq__fun__sendmsg" name="sendmsg" package="little-zmq"><lambda-list><elt>socket</elt><elt>data</elt><elt>&amp;key</elt><elt>eintr-retry</elt><elt>send-more</elt><elt>(eintr-retry t)</elt></lambda-list></function-definition><macro-definition id="little-zmq__fun__with-message" name="with-message" package="little-zmq"><lambda-list><elt>(msg &amp;optional data)</elt><elt>&amp;body</elt><elt>body</elt></lambda-list></macro-definition><class-definition id="little-zmq__class__octet-message" name="octet-message" package="little-zmq"><cpl><superclass status="EXTERNAL" id="little-zmq__class__message" name="message" package="little-zmq"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/></class-definition><macro-definition id="little-zmq__fun__with-sockets" name="with-sockets" package="little-zmq"><lambda-list><elt>socket-list</elt><elt>&amp;body</elt><elt>body</elt></lambda-list></macro-definition><function-definition id="little-zmq__fun__make-message" name="make-message" package="little-zmq"><lambda-list><elt>data</elt></lambda-list></function-definition><macro-definition id="little-zmq__fun__has-more-p" name="has-more-p" package="little-zmq"><lambda-list><elt>future</elt></lambda-list></macro-definition><function-definition id="zmq-bindings__fun__rcvmore" name="rcvmore" package="zmq-bindings"><lambda-list><elt>socket</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__poll" name="poll" package="little-zmq"><lambda-list><elt>poll-list</elt><elt>&amp;optional</elt><elt>(timeout -1)</elt><elt>(eintr-retry t)</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__free-message" name="free-message" package="little-zmq"><lambda-list><elt>message</elt></lambda-list></function-definition><macro-definition id="little-zmq__fun__with-message-future" name="with-message-future" package="little-zmq"><lambda-list><elt>(sym socket &amp;key (blocking t) (eintr-retry t))</elt><elt>&amp;body</elt><elt>body</elt></lambda-list></macro-definition><class-definition id="zmq-bindings__class__pub" name="pub" package="zmq-bindings"><cpl><superclass status="INTERNAL" name="socket" package="zmq-bindings"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string></documentation-string></class-definition><class-definition id="zmq-bindings__class__xpub" name="xpub" package="zmq-bindings"><cpl><superclass status="INTERNAL" name="socket" package="zmq-bindings"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string></documentation-string></class-definition><function-definition id="little-zmq__fun__binary-address-to-string" name="binary-address-to-string" package="little-zmq"><lambda-list><elt>message</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__recvmsg" name="recvmsg" package="little-zmq"><lambda-list><elt>socket</elt><elt>message</elt><elt>&amp;key</elt><elt>blocking</elt><elt>as</elt><elt>eintr-retry</elt><elt>(eintr-retry t)</elt><elt>(blocking t)</elt></lambda-list></function-definition><class-definition id="zmq-bindings__class__pair" name="pair" package="zmq-bindings"><cpl><superclass status="INTERNAL" name="socket" package="zmq-bindings"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string></documentation-string></class-definition><class-definition id="zmq-bindings__class__dealer" name="dealer" package="zmq-bindings"><cpl><superclass status="INTERNAL" name="socket" package="zmq-bindings"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string></documentation-string></class-definition><class-definition id="zmq-bindings__class__rep" name="rep" package="zmq-bindings"><cpl><superclass status="INTERNAL" name="socket" package="zmq-bindings"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string></documentation-string></class-definition><function-definition id="little-zmq__fun__as-octet-message" name="as-octet-message" package="little-zmq"><lambda-list><elt>msg</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__destroy-message" name="destroy-message" package="little-zmq"><lambda-list><elt>message</elt></lambda-list></function-definition><class-definition id="zmq-bindings__class__xsub" name="xsub" package="zmq-bindings"><cpl><superclass status="INTERNAL" name="socket" package="zmq-bindings"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string></documentation-string></class-definition><class-definition id="zmq-bindings__class__push" name="push" package="zmq-bindings"><cpl><superclass status="INTERNAL" name="socket" package="zmq-bindings"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string></documentation-string></class-definition><class-definition id="zmq-bindings__class__sub" name="sub" package="zmq-bindings"><cpl><superclass status="INTERNAL" name="socket" package="zmq-bindings"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string></documentation-string></class-definition></external-symbols><internal-symbols><function-definition id="little-zmq__fun__free-fn" name="free-fn" package="little-zmq"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="zmq-bindings__fun__identity" name="identity" package="zmq-bindings"><lambda-list><elt>socket</elt><elt>&amp;key</elt><elt>as</elt><elt>(as octets)</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__bind" name="bind" package="little-zmq"><lambda-list><elt>socket</elt><elt>address</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__poll-count" name="poll-count" package="little-zmq"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__connect" name="connect" package="little-zmq"><lambda-list><elt>socket</elt><elt>address</elt></lambda-list></function-definition><macro-definition id="little-zmq__fun__with-messages" name="with-messages" package="little-zmq"><lambda-list><elt>message-list</elt><elt>&amp;body</elt><elt>body</elt></lambda-list></macro-definition><class-definition id="little-zmq__class__poll-list" name="poll-list" package="little-zmq"><cpl><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/></class-definition><function-definition id="little-zmq__fun__make-zero-copy-message" name="make-zero-copy-message" package="little-zmq"><lambda-list><elt>data</elt><elt>size</elt><elt>&amp;optional</elt><elt>hint</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__msg-t-ptr" name="msg-t-ptr" package="little-zmq"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__set-events" name="set-events" package="little-zmq"><lambda-list><elt>socket</elt><elt>poll-item-ptr</elt><elt>&amp;rest</elt><elt>events</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__reset-message" name="reset-message" package="little-zmq"><lambda-list><elt>message</elt><elt>&amp;optional</elt><elt>new-size</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__call-with-retry" name="call-with-retry" package="little-zmq"><lambda-list><elt>predicate</elt><elt>thunk</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__poll-items" name="poll-items" package="little-zmq"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__copy-message" name="copy-message" package="little-zmq"><lambda-list><elt>destination</elt><elt>source</elt></lambda-list></function-definition><function-definition id="little-zmq__fun__wrap" name="wrap" package="little-zmq"><lambda-list><elt>address</elt><elt>msg-list</elt></lambda-list></function-definition><class-definition id="little-zmq__class__zero-copy-message" name="zero-copy-message" package="little-zmq"><cpl><superclass status="EXTERNAL" id="little-zmq__class__message" name="message" package="little-zmq"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/></class-definition></internal-symbols></package></documentation>